"""
#Casting
x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3

print(type(x))
print(type(y))
print(type(z))

#Classes Objects
class Robot: 
    def __init__(self, name, model, year):
        self.name = name
        self.model = model
        self.year = year

    def into(self): 
        print(f"Robot {self.name} is entering the room")


r1 = Robot("Iron Man", "2.0", 2015)  
r1.into()  

r2 = Robot("Vision", "1.0", 2020)  
r2.into()  

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

p1.age = 40

print(p1.age)

#inheritance
class R:
    def __init__(self,n,l):
        self.n=n
        self.l=l
    def print_(self):
        print(self.n,self.l)
x=R("Ali","Sham")
x.print_()

class H(R):
    def __init__(self,f,l):
        R.__init__(self,f,l)

h=H("zain","Ali")
h.print_()

class Student(R):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

x = Student("Mike", "Olsen")
x.graduationyear=2020
print(x.graduationyear)

#iterator
class MyNumbers:
  def __iter__(self):
    self.a = 0
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter =iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))

#Module Task
import module as m
#built in modules
import platform 
m.greeting("ali")

x = platform.system()
print(x)

x = platform.processor()
print(x)

x= dir(platform)
a = m.person1["age"]
print(a)

from module import person1
print(person1["age"])

#module File code
def greeting(name):
  print("Hello, " + name)
person1 = {
  "name": "John",
  "age": 36,
  "country": "Norway"
}

print("hello")
#Number Conversion
x = 1    # int
y = 2.8  # float
z = 1j   # complex

print(x)
print(y)
print(z)
print("\n")
print(type(x))
print(type(y))
print(type(z))
x = float(x)
y = str(z)
z = complex(y)

print(x)
print(y)
print(z)
print("\n")
print(type(x))
print(type(y))
print(type(z))
import random

print(random.randrange(10, 100))

#Polymorphsim

class Vec:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

class Car(Vec):

  def move(self):
    print("Drive!")

class Boat(Vec):

  def move(self):
    print("Sail!")

class Plane(Vec):

  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang")       #Create a Car class
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat class
plane1 = Plane("Boeing", "747")     #Create a Plane class

for x in (car1, boat1, plane1):
  x.move()

#Python Data Types
x1=1
x2=1.00
x3="Sharp"
x4=2j
x5=["apple", "banana", "cherry"]
x6=("hello",34,12.0)
x7=range(3)
x8=True
x9=None
x10={"name":"Ali","age":90}
print(type(x1))
print(type(x2))
print(type(x3))
print(type(x4))
print(type(x5))
print(type(x6))
print(type(x7))
print(type(x8))
print(type(x9))
print(type(x10))

#Python Json
import json

x='{"name":"John","age":"30","city":"New York"}'
print(x)
y=json.loads(x)
print(y)

x = {
  "name": "John",
  "age": 30,
  "city": "New York"
}
print(x)

y = json.dumps(x)
print(y)

print(json.dumps({"name": "John", "age": 30}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))

import json

x = {
  "name": "John",
  "age": 30,
  "married": True,
  "divorced": False,
  "children": ("Ann","Billy"),
  "pets": None,
  "cars": [
    {"model": "BMW 230", "mpg": 27.5},
    {"model": "Ford Edge", "mpg": 24.1}
  ]
}

print(json.dumps(x,indent=4))

print(json.dumps(x, indent=4, separators=(". ", " = ")))

print(json.dumps(x, indent=4, sort_keys=True))
#Python Math
import math

z=[2,3,9,10]
x=min(z)# Find minimum
y=max(z)# find maximum

print(x)
print(y)

x=abs(-7.25)# Take absolute
print(x)
x=pow(2,3)# Power of 2^3
print(x)

x=math.sqrt(81)# root of 81
print(x)

x=7.8
x=math.ceil(x) # lean toward the highest number
print(x)
x=7.8
x=math.floor(x)# lean toward the lowest number
print(x)
x=math.pi# Get the value of Pi
print(x)

#Python Regex
import re

txt="The rain in china 16"
x=re.findall("ai",txt)
print(x)
if x:
  print("YES! We have a match!")
else:
  print("No match")

x=re.findall("[0-9][0-9]",txt)
print(x)
txt = "The rain in Spain"
x = re.search("Portugal", txt)
print(x)
x=re.split(" ",txt)
print(x)

x=re.split(" ",txt,1)
print(x)

x=re.sub(" ",'#',txt)
print(x)
x = re.sub("\s", "9", txt, 2)
print(x)

txt = "The rain in Spain"
x = re.search("ai", txt)
print(x)

txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.span())

txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.string)

x = re.search(r"\bS\w+", txt)
print(x.group())

#Python Try Except

try:
    print(x)
except NameError:
    print("Var not defined")
except:
    print("Something went wrong")

print("----------------------")
try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")

print("----------------------")
try:
  print(x)
except:
  print("Something went wrong")
else:
   print("else block")
finally:
  print("The 'try except' is finished")

print("----------------------")
try:
  f = open("demofile.txt")
  try:
    f.write("Lorum Ipsum")
  except:
    print("Something went wrong when writing to the file")
  finally:
    f.close()
except:
  print("Something went wrong when opening the file")
print("----------------------")
x = -1

if x < 0:
  raise Exception("Sorry, no numbers below zero")
print("----------------------")
x = "hello"

if not type(x) is int:
  raise TypeError("Only integers are allowed")

#Python Input
name = input("Enter name: ")
print(f"Hello, {name}!")

#Python Dates
import datetime

x = datetime.datetime.now()
print(x)# date complete
print(x.year) # Year
print(x.strftime("%A"))# Day name
print(x.strftime("%B"))# Month Name Full
print(x.strftime("%b"))# Short Month
print(x.strftime("%a"))# Short Day 
print(x.strftime("%w"))#Week Day no
print(x.strftime("%d"))#Month  Day  no
print(x.strftime("%m"))#Month no
print(x.strftime("%y"))#year no
print(x.strftime("%H"))#24 hour
print(x.strftime("%I"))#12 hour
print(x.strftime("%p"))#AM/PM
print(x.strftime("%Z"))#Time Zone
print(x.strftime("%U"))#Week Number
print(x.strftime("%W"))#Week Number
print(x.strftime("%c"))
print(x.strftime("%C"))
print(x.strftime("%x"))#local date
print(x.strftime("%X"))#local time

#python PIP
#pip --version
#pip install camelcase
import camelcase

c = camelcase.CamelCase()

txt = "hello world"

print(c.hump(txt))

#remove Pip uninstall camelcase
#pip list

#String Formatting
p=49
txt=f"The price of {p*2:.2f}$"
print(txt)

price = 49
txt=f"it is very {"expensive" if price>50 else "cheap"}"

print(txt)
fruit = "apples"
txt = f"I love {fruit.upper()}"
print(txt)
"""
#String

a = '''Hi how are you i am 
fine .What to do do'''
print(a)
for x in "banana":
  print(x)
txt = "The best things in life are free!"
print("free" in txt)
"""Video Practice"""
# count=5
# while(count>0):
#     print(count)
#     count=count-1
# else:
#     print("Not in else") 
# for i in range(12):
#     if(i==0 or i==11):
#         continue
#     print("5 X",i,"=",5*i)

# print("Leave Loop")
# i=0
# while(True):
#    ( print(i)
#     i=i+1
#     if(i%100==0):
#         break


# def gmean(a,b):
#     mean=(a*b/(a+b))
#     return mean
    

# c=gmean(5,7)
# d=gmean(10,1)

# def checkgreater(a,b):
#     if (a > b):
#         print("Yes A is greater than B")
#     elif(a==b):
#         print("B is equal than A")
#     else:
#         print("B is greater than A")

# checkgreater(c,d)
# a,b=1,2
# def less(a,b):
#     pass

# less(a,b)
# def avg(a=9,b=1):
#     print("The avg is",(a+b)/2)
# avg()

# def avg(**a):
#     print(type(a))
#     sum=0
#     for i in a:
#       sum=sum+i
#     print("avg is =",sum/len(a))
#       # avg(1,2,3,4,5,6,7,8,9
# avg()
"""List"""
# l=[1,'3',5j]
# print(l)
# print(type(l))

# l.append(7)
# l.insert(0,2)
# l.remove(2)
# print(l)

# # for i in l:
# #     print(i)
# print(l[0:3:2])

# l=[1,2,3,4,5]
# print(l)
# l.append(5)
# l.append(3)
# l.sort(reverse=True)
# l.reverse()
# print(l.index(2))
# print(l)
# l.pop(0)
# print(l)



# m=l.copy()
# m[0]=0
# print(m)
# l.insert(1,899)
# print(l)
# m=[99,100,110]
# k=l+m
# print(k)
# l.extend([1,2,[33,[1000,1],99],3,4,5])
# print(l)
# print(len(l))

"""Tuple"""

# t=(1,5,6,8,9)
# print(type(t),t)

# if 5 in t:
#     print("yes")
# else:
#     print("no")
# t=t[0:2]
# print(t)

# c=("Sap","itlay","china")
# print(id(c))
# temp=list(c)
# print(temp)
# temp.append(13)
# print(temp)
# temp.pop(0)
# print(temp)
# temp[2]=99 
# c=tuple(temp)
# print(c)
# print(id(c))
# t=(1,2,3,4,5,1,2,3,4,4,4,2,3,2)
# print(t.count(2))
# print(t.index(3,4,8))
# print(len(t))
# import time
# t=time.strftime('%H:%M:%S')
# hour=int(time.strftime('%H'))
# print(hour)
# if (hour>6  and hour<12):
#     print("good morning")
# elif (hour>=12 and hour<18):
#     print("good afternoon")
# else:
#     print("good night")

# n="hassaan"
# c="pak"
# print(f"My name is {n} and i am from {c}")

# def sq(n):
#     '''Take a number and return it's square'''
#     print(n**2)
#     print(sq.__doc__)
# sq(5)
# print(sq.__doc__)

"""SET"""

# h=set()
# h={1,2,3,4,4,5}
# print(type(h))
# print(h)
# for i in h:
#     print(i)

# h.add(6)
# print(h)

# h1={8,9,7}
# print(h.union(h1))
# print(h,h1)
# h.update(h1)
# print(h)
# h.remove(1)#discard
# print(h)
# h.pop()
# print(h)

"""Dict"""
# info={
#     1:{
#         'name':"Karan",
#         'age':18
#     },
#     2:{
#         'name':"Hassaan",
#         'age':19
#     }
# }
# print(info.keys())
# for i in info.keys():
#     print(info[i])
# print(info.items())

# for key,value in info.items():
#     print(key,value)

# ep={
#     1:10,
#     2:30,
#     3:40,
#     5:20,
#     6:70,
#     7:80
# }
# ep1={
#     8:45,
#     9:90
# }
# ep.update(ep1)
# print(ep)

# #ep.clear()
# ep.pop(1)

# print(ep)
# #del ep1
# del ep[2]
# print(ep)



# a="3"
# print(f"Multiplication of {a} is \n")
# try:
#     for i in range(11):
#         print(f"{int(a)} * {i} = {int(a)*i}")
# except:
#     print("Invalid input")  # This will print if the input is not a number

# try:
#     l=[1,2,3,4,5]
#     i=int(input("Enter the  index : "))
#     print(l[i])
# except:
#     print("Some error")
# finally:
#     print("I always run")
"""Raising custom errors"""
# a=10
# if (a<5 or a>9):
#     raise ValueError("Value should be between 5 and 9")

# l=[["what is your city","Fsd","Karachi","Lhr","Isb",1],
#    ["what is your city","Fsd","Karachi","Lhr","Isb",1],
#    ["what is your city","Fsd","Karachi","Lhr","Isb",1],
#    ["what is your city","Fsd","Karachi","Lhr","Isb",1],
#    ]
# for i in range(0,len(l)):
#     l1=l[i]
#     print(f"Question for rupees 10000")
#     print(f"a.{l1[1]}       a.{l1[2]}")
#     print(f"a.{l1[3]}       a.{l1[4]}")

# print(type(l))
# print(type(l1))

# list1 = [10, 20, 25, 30, 35]
# # list2 = [40, 45, 60, 75, 90]
# # list1=list1+list2
# # print(list1)

# for ind,l in enumerate(list1,start=19):
#     print(f"Index : {ind} Value : {l}") 
"""Virtual Environment in Python"""
#python -m venv myenv
# x = 100
# y = 50
# print(x and y)
# print(2%6)
# print(2**2**3)
# def d(**k):
#     print(type(k))
# d()


# def display(**kwargs):
#     for i in kwargs:
#         print(i)

# display(emp="Kelly", salary=9000)

# def add(a, b):
#     return a+5, b+5

# result = add(3, 2)
# print(type(result))

# for num in range(10, 14):
#    for i in range(2, num):
#        if num%i == 1:
#           print(num)
#           break
# x = 0
# for i in range(10):
#   for j in range(-1, -10, -1):
#     x += 1
#     print(x)
# var = 10
# for i in range(10):
#     for j in range(2, 10, 1):
#         if var % 2 == 0:
#             continue
#             var += 1
#     var+=1
# else:
#     var+=1
# print(var)

# sampleList = [10, 20, 30, 40]
# del sampleList[0:6]
# print(sampleList)
# aList = [1, 2, 3, 4, 5, 6, 7]
# pow2 =  [2 * x for x in aList]
# print(pow2)
# list1 = ['xyz', 'zara', 'PYnative']
# print (max(list1))
# l = [None] * 10
# print(len(l))
# aList = [4, 8, 12, 16]
# aList[1:4] = [20, 24, 28]
# print(aList)
# sampleList = [10, 20, 30, 40, 50]
# sampleList.pop()
# print(sampleList)

# sampleList.pop(2)
# print(sampleList)
# aList = [5, 10, 15, 25]
# print(aList[::-2])

# my_list = ["Hello", "Python","Hi"]
# print("-".join(my_list))

"""Why should we use if __name__="__main__": """
